        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        1:   19:int* cache_array = new int[1000000];    //should i not make it 1 millino and just take j-i and make that cache size?
call    0 returned 100%
        -:   20:
        -:   21:
        -:   22:using namespace std;
        -:   23:
        -:   24:// ------------
        -:   25:// collatz_read
        -:   26:// ------------
        -:   27:
function _Z12collatz_readRKSs called 17 returned 100% blocks executed 80%
       17:   28:pair<int, int> collatz_read (const string& s) {
       17:   29:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   30:    int i;
        -:   31:    int j;
       17:   32:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       17:   33:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   34:
        -:   35:// ------------
        -:   36:// collatz_eval
        -:   37:// ------------
        -:   38:
function _Z12collatz_evalii called 16 returned 100% blocks executed 83%
       16:   39:int collatz_eval (int i, int j) {    
       16:   40:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:   41:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   42:
        -:   43:    //Swaps values if i j ranges are backwards
       16:   44:    if( i > j){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   45:        int temp = i;   
    #####:   46:        i = j;          
    #####:   47:        j = temp;       
        -:   48:    }
        -:   49:
       16:   50:    int end = j+1;
        -:   51:
     1852:   52:    for(int start = i; start < end; start++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   53:
     1836:   54:        int cycle = 1;
     1836:   55:        int val = start;
        -:   56:
   112468:   57:        while(val > 1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   58:
        -:   59:            //even
   108796:   60:            if((val & 1) == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    72908:   61:                val = val/2;
        -:   62:            }
        -:   63:
        -:   64:            //odd
        -:   65:            else{
    35888:   66:                val = (val * 3) + 1;
        -:   67:            }
        -:   68:
        -:   69:            //update cycle counter
   108796:   70:            cycle++;
        -:   71:        }
        -:   72:
     1836:   73:        assert(cycle > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   74:
     1836:   75:        cache_array[start] = cycle;
        -:   76:    }
        -:   77:
        -:   78:
        -:   79:    /** SEARCH CACHE ARRAY FOR ALL SAVED VALUES **/
        -:   80:    
       16:   81:    int ret_value = cache_array[i];
     1852:   82:    for(int begin = i; begin < end; begin++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   83:
     1836:   84:        int temp = cache_array[begin];
        -:   85:
     1836:   86:        if(temp > ret_value){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       65:   87:            ret_value = temp;
        -:   88:        }
        -:   89:    }
        -:   90:    
       16:   91:    return ret_value;
        -:   92:}
        -:   93:
        -:   94:// -------------
        -:   95:// collatz_print
        -:   96:// -------------
        -:   97:
function _Z13collatz_printRSoiii called 16 returned 100% blocks executed 100%
       16:   98:void collatz_print (ostream& w, int i, int j, int v) {
       16:   99:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  100:
        -:  101:// -------------
        -:  102:// collatz_solve
        -:  103:// -------------
        -:  104:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 80%
        3:  105:void collatz_solve (istream& r, ostream& w) {
        3:  106:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18:  107:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
       12:  108:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  109:        const int            i = p.first;
       12:  110:        const int            j = p.second;
       12:  111:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I_cache_array called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       18:  112:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
