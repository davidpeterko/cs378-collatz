        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:#include "Collatz.h"
        -:   17:
        -:   18:#define CACHE_SIZE 1000000
        -:   19:
        -:   20://Cache
        -:   21:#ifdef CACHE_SIZE
        -:   22:int cache_array[CACHE_SIZE];    
        -:   23:#endif
        -:   24:
        -:   25:using namespace std;
        -:   26:
        -:   27:// ------------
        -:   28:// collatz_read
        -:   29:// ------------
        -:   30:
function _Z12collatz_readRKSs called 17 returned 100% blocks executed 80%
       17:   31:pair<int, int> collatz_read (const string& s) {
       17:   32:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   33:    int i;
        -:   34:    int j;
       17:   35:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       17:   36:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   37:
        -:   38:// ------------
        -:   39:// collatz_eval
        -:   40:// ------------
        -:   41:
function _Z12collatz_evalii called 17 returned 100% blocks executed 88%
       17:   42:int collatz_eval (int i, int j) {    
       17:   43:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       17:   44:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   45:
        -:   46:    //Swaps values if i j ranges are backwards
       17:   47:    if( i > j){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:   48:        int temp = i;   
        1:   49:        i = j;          
        1:   50:        j = temp;       
        -:   51:    }
        -:   52:
       17:   53:    int end = j+1;
        -:   54:
     1863:   55:    for(int start = i; start < end; start++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   56:
     1846:   57:        int cycle = 1;
     1846:   58:        int val = start;
        -:   59:
   112555:   60:        while(val > 1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   61:
        -:   62:            //even
   108863:   63:            if((val & 1) == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    72958:   64:                val = val/2;
        -:   65:            }
        -:   66:
        -:   67:            //odd
        -:   68:            else{
    35905:   69:                val = (val * 3) + 1;
        -:   70:            }
        -:   71:
        -:   72:            //update cycle counter
   108863:   73:            cycle++;
        -:   74:        }
        -:   75:
     1846:   76:        assert(cycle > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   77:
     1846:   78:        cache_array[start] = cycle;
        -:   79:    }
        -:   80:
        -:   81:
        -:   82:    /** SEARCH CACHE ARRAY FOR ALL SAVED VALUES **/
        -:   83:    
       17:   84:    int ret_value = cache_array[i];
     1863:   85:    for(int begin = i; begin < end; begin++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   86:
     1846:   87:        int temp = cache_array[begin];
        -:   88:
     1846:   89:        if(temp > ret_value){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       70:   90:            ret_value = temp;
        -:   91:        }
        -:   92:    }
        -:   93:    
       17:   94:    return ret_value;
        -:   95:}
        -:   96:
        -:   97:// -------------
        -:   98:// collatz_print
        -:   99:// -------------
        -:  100:
function _Z13collatz_printRSoiii called 16 returned 100% blocks executed 100%
       16:  101:void collatz_print (ostream& w, int i, int j, int v) {
       16:  102:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  103:
        -:  104:// -------------
        -:  105:// collatz_solve
        -:  106:// -------------
        -:  107:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 80%
        3:  108:void collatz_solve (istream& r, ostream& w) {
        3:  109:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18:  110:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
       12:  111:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  112:        const int            i = p.first;
       12:  113:        const int            j = p.second;
       12:  114:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I_cache_array called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       18:  115:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
